---
### Switch to non-default user as soon as possible if possible
#- name: does primary login user exist?
#  local_action: "command ssh -q -o ConnectTimeout=3 -l {{ create_users[0].name }} {{ inventory_hostname }} /bin/true"
#  register: user_exists
#  ignore_errors: true
#  changed_when: false
#
#- name: switch remote_user if possible
#  remote_user: "{{ user_exists | success | ternary(omit, create_users[0].name) }}"
#  command: "/bin/true"
#  changed_when: false

- name: Create groups
  group:
    name: "{{ item.groupname }}"
    state: "{{ item.state | default('present') }}"
    gid: "{{ item.gid | default(omit) }}"
    system: "{{ item.system | default(omit) }}"
  with_items: "{{ users_groups }}"
  when: users_groups is defined

- name: Create per-user groups for default users
  group:
    name: "{{ item.username }}"
    state: "present"
    gid: "{{ item.gid | default(omit) }}"
    system: "{{ item.system | default(omit) }}"
  with_items:
    - "{{ users | default([]) }}"
    - "{{ additionalusers | default([]) }}"
  when: users_per_user_groups == true

- name: Create a directory if it does not exist
  file:
    path: '{{ users_default_home }}'
    state: directory
    mode: '0755'

- name: Create users
  user:
    name: '{{ item.username }}'
    state: 'present'
    uid: '{{ item.uid | default(omit) }}'
    group: '{{ item.group | default(item.username) }}'
    groups: '{{ item.groups | default("") | join(",") }}'
    shell: '{{ item.shell | default(users_default_shell) }}'
    comment: '{{ item.comment | default(omit) }}'
    password: '{{ item.password | default(users_default_password) }}'
    home: '{{ item.home | default(users_default_home+"/"+item.username) }}'
    createhome: '{{ item.createhome | default(users_create_homedirs) }}'
    system: '{{ item.system | default(omit) }}'
    append: yes
    move_home: yes
    remove: '{{ item.remove | default("no") }}'
  with_items:
    - "{{ users | default([]) }}"
    - "{{ additionalusers | default([]) }}"

- name: Add admin users to admin group
  user:
    name: '{{ item.username }}'
    state: 'present'
    groups: '{{ users_admin_group }}'
    append: yes
    createhome: no
  with_items:
    - "{{ users | default([]) }}"
    - "{{ additionalusers | default([]) }}"
  when: >
    item.is_admin is defined and
    item.is_admin == true
  
- name: SSH keys
  authorized_key: >
    user='{{ item.username }}'
    key='{{ item.sshkey | default("none") }}'
  with_items:
    - "{{ users | default([]) }}"
    - "{{ additionalusers | default([]) }}"
  when: >
    not ( item.sshkey|default('none') == 'none' )
  
- name: Sudo installed
  apt: name=sudo state=present

- name: Admin sudoers
  template:
    src: 'sudo_administrators.j2'
    dest: '/etc/sudoers.d/administrators'
    owner: 'root'
    group: 'root'
    mode: '0440'
  when: users_manage_admin_sudoers == true

# - name: create users
#   user: name="{{ item.name }}"
#         comment="{{ item.comment }}"
#         group="{{ item.group }}"
#         groups="{{ item.groups }}"
#         uid="{{ item.uid }}"
#         state=present
#         shell=/bin/bash
#   with_items: "{{ create_users }}"
#   when: create_users is defined
#   tags: [ 'users' ]

# - name: install ssh pubkeys for new users
#   authorized_key: user="{{ item.name }}"
#                   key="{{ item.pubkey }}"
#                   state=present
#   with_items: "{{ create_users }}"
#   when: create_users is defined
#   tags: [ 'users' ]

### disable the 'pi' user's ability to login in with password
### if you enable this, you may lock yourself out--you must make sure another
### user has been added with both sudo privileges and a password by which
### sudo can be authenticated
#- name: disable 'pi' user
#  user: name="pi"
#        password="*"
#        state=present
#  tags: [ 'users' ]
